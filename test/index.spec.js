// Generated by CoffeeScript 1.9.1
(function() {
  var def, expect,
    slice = [].slice;

  expect = require('chai').expect;

  def = require('../index');

  describe('def.Object Module to extend an object, with multiple objects', function() {
    var baseObj1, baseObj2, baseObj3, baseObj4, baseObj5, objWithAttrs, ref;
    ref = [null, null, null, null, null, null, null], baseObj5 = ref[0], baseObj1 = ref[1], baseObj2 = ref[2], baseObj3 = ref[3], baseObj4 = ref[4], baseObj5 = ref[5], objWithAttrs = ref[6];
    before(function() {
      baseObj1 = {
        sum: function() {
          var j, len, n, numbers, r;
          numbers = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          r = 0;
          for (j = 0, len = numbers.length; j < len; j++) {
            n = numbers[j];
            r += n;
          }
          return r;
        },
        multiply: function() {
          var j, len, n, numbers, r;
          numbers = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          r = 1;
          for (j = 0, len = numbers.length; j < len; j++) {
            n = numbers[j];
            r *= n;
          }
          return r;
        }
      };
      baseObj2 = {
        pow: function(base, num) {
          var i, j, nums, ref1;
          nums = [];
          for (i = j = 1, ref1 = num; 1 <= ref1 ? j < ref1 : j > ref1; i = 1 <= ref1 ? ++j : --j) {
            nums.push(num);
          }
          return this.multiply.apply(this, nums);
        }
      };
      baseObj3 = {
        increaseByOne: function(n) {
          return this.sum(n, 1);
        }
      };
      baseObj4 = {
        _privateAttr: 5,
        publicMethod: function(x) {
          return this._privateMethod(x);
        },
        _privateMethod: function(x) {
          return x * this._privateAttr;
        },
        _privateMethod4: function(x) {
          return x / this._privateAttr;
        },
        _privateMethod2: function(x) {
          return x + this._privateAttr;
        },
        _privateMethod3: function(x) {
          return x - this._privateAttr;
        }
      };
      objWithAttrs = {
        enable: true,
        preferences: {
          fullScreen: true
        }
      };
      return baseObj5 = {
        increaseByOne: function(n) {
          return this.sum(n, 1);
        },
        enable: false,
        itemList: ['item5']
      };
    });
    describe('The def-inc module', function() {
      it('should have an Object method', function() {
        expect(def.Object).to.exist;
        return expect(def.Object).to.be.a('function');
      });
      return it('should have a Class method', function() {
        expect(def.Class).to.exist;
        return expect(def.Class).to.be.a('function');
      });
    });
    return describe('The defined object', function() {
      it('should have all methods from the included baseObjects and their original attributes', function() {
        var definedObj;
        definedObj = def.Object({
          include_: [baseObj1, baseObj2, baseObj5]
        });
        return expect(definedObj).to.have.all.keys('increaseByOne', 'sum', 'multiply', 'pow', 'enable', 'itemList');
      });
      it('should be able to call the baked methods', function() {
        var definedObj;
        definedObj = def.Object({
          include_: [baseObj1, baseObj2, baseObj5]
        });
        expect(definedObj.sum(5, 10)).to.equal(15);
        expect(definedObj.increaseByOne(3)).to.equal(4);
        expect(definedObj.multiply(4, 2)).to.equal(8);
        return expect(definedObj.pow(2, 3)).to.equal(9);
      });
      it('should include(clone) attributes from the baked objects', function() {
        var definedObj;
        definedObj = def.Object({
          include_: [objWithAttrs, baseObj5]
        });
        expect(definedObj.enable).to.exist;
        expect(definedObj.preferences.fullScreen).to.exist.and.to.be["true"];
        delete objWithAttrs.preferences.fullScreen;
        expect(definedObj.preferences.fullScreen).to.exist;
        return objWithAttrs.preferences = {
          fullScreen: true
        };
      });
      it('should not clone an attribute from a base object if the receiving obj has a key with the same name', function() {
        var definedObj;
        definedObj = def.Object({
          include_: [objWithAttrs, baseObj5]
        });
        return expect(definedObj.enable).to.be["false"];
      });
      it('should have the attributes of the last baseObj that had an attr nameConflict (Override attrs in arg passing order)', function() {
        var definedObj;
        definedObj = def.Object({
          include_: [
            {
              overridden: false,
              itemList: ['item2']
            }, {
              overridden: true
            }, baseObj5
          ]
        });
        expect(definedObj.overridden).to.be["true"];
        return expect(definedObj.itemList).to.deep.equal(['item5']);
      });
      it('should be able to only include the specified attributes from a baked baseObject, when an attr list [] is provided', function() {
        var definedObj;
        definedObj = def.Object({
          include_: [baseObj1, ['sum'], baseObj4, ['publicMethod'], baseObj5, ['*']]
        });
        expect(definedObj.sum).to.exist;
        expect(definedObj.multiply).to.not.exist;
        expect(definedObj._privateAttr).to.not.exist;
        expect(definedObj._privateMethod).to.not.exist;
        expect(definedObj._privateMethod2).to.not.exist;
        return expect(definedObj._privateMethod3).to.not.exist;
      });
      it('should be able to exclude an attribute from a baked baseObject, when an "!" flag is provided e.g: ["!", "attr1", "attr2"]', function() {
        var definedObj;
        definedObj = def.Object({
          include_: [baseObj1, ['!', 'multiply'], baseObj5, ['*']]
        });
        expect(definedObj.sum).to.exist;
        return expect(definedObj.multiply).to.not.exist;
      });
      it('should include all attributes from a baked baseObject when an ["*"] (includeAll)  flag is provided', function() {
        var definedObj;
        definedObj = def.Object({
          include_: [baseObj1, ['*'], baseObj5, ['*']]
        });
        expect(definedObj.sum).to.exist;
        expect(definedObj.multiply).to.exist;
        return expect(definedObj.increaseByOne).to.exist;
      });
      it('should exclude all attributes from a baked baseObject when an ["!"] (excludeAll) flag is provided', function() {
        var definedObj;
        definedObj = def.Object({
          include_: [baseObj1, ['!'], baseObj5, ['*']]
        });
        expect(definedObj.sum).to.not.exist;
        expect(definedObj.multiply).to.not.exist;
        return expect(definedObj.increaseByOne).to.exist;
      });
      it('should have the _.super property hidden and frozen (non: enumerable, configurable, writable)', function() {
        var definedObj;
        definedObj = def.Object({
          include_: [baseObj1, baseObj5, ['*']]
        });
        expect(definedObj.propertyIsEnumerable('_super')).to.be["false"];
        return expect(Object.isFrozen(definedObj._super)).to.be["true"];
      });
      it('should include attributes from constructor functions/classes prototypes', function() {
        var Parent, definedObj;
        Parent = (function() {
          function Parent() {}

          Parent.prototype.someMethod = function() {
            return 'x';
          };

          return Parent;

        })();
        definedObj = def.Object({
          include_: [Parent, ['!', 'constructor'], baseObj5, ['*']]
        });
        expect(definedObj.someMethod).to.exist;
        return expect(definedObj.someMethod()).to.equal('x');
      });

      /*it 'should include static attributes (classAttributes) from constructor functions/classes, to the resulting constructor, when one is defined', ->
        class Parent
          @staticMethod: -> 'y'
      
        definedObj = def.Class(
          include_: [ Parent ]
          constructor:-> true
        )
        instanceOfBaked = new definedObj
        expect(instanceOfBaked.staticMethod).to.exist
        expect(instanceOfBaked.staticMethod()).to.equal('y')
      
      it 'should not include static attributes (classAttributes) from constructor functions/classes, when a constructor is not defined', ->
        class Parent
          @staticMethod: -> 'y'
      
        definedObj = def.Object( include_: [ Parent, ['!', 'constructor'] ])
        expect(definedObj.staticMethod).to.exist
        expect(definedObj.staticMethod()).to.equal('y')
       */
      it('should be able to call truly private variables, when defined using and IIFE', function() {
        var definedObj;
        definedObj = def.Object({
          privatize_: (function() {
            var _privateVar;
            _privateVar = 5;
            return {
              set: function(val) {
                return _privateVar = val;
              },
              get: function() {
                return _privateVar;
              }
            };
          })()
        });
        expect(definedObj.privateVar).to.not.exist;
        expect(definedObj.get()).to.equal(5);
        definedObj.set(4);
        return expect(definedObj.get()).to.equal(4);
      });
      describe('When an attribute(Only methods) is marked with the ~ flag in the filter array, e.g: ["~methodName"]', function() {
        it('should bind the method context to the original obj (parent) instead of the target obj', function() {
          var definedObj;
          definedObj = def.Object({
            include_: [baseObj4, ['~publicMethod']]
          });
          expect(definedObj._privateAttr).to.not.exist;
          expect(definedObj._privateMethod).to.not.exist;
          expect(definedObj.publicMethod).to.exist;
          return expect(definedObj.publicMethod(2)).to.equal(10);
        });
        return it('should ignore ~ when using the exclude flag', function() {
          var definedObj;
          definedObj = def.Object({
            include_: [baseObj4, ['!', '~_privateMethod']]
          });
          return expect(definedObj._privateMethod).to.not.exist;
        });
      });
      describe('When inheriting from multiple objects', function() {
        return it('should include/inherit attributes in the opposite order they were passed to the function, so the last ones takes precedence over the first ones, when an attribute is found in more than one object', function() {
          var definedObj, newdefinedObj;
          definedObj = def.Object({
            include_: [
              baseObj1, {
                multiply: function(x) {
                  return x;
                }
              }
            ]
          });
          expect(definedObj.multiply(5)).to.equal(5);
          newdefinedObj = def.Object({
            include_: [definedObj, baseObj1]
          });
          return expect(newdefinedObj.multiply(5, 5)).to.equal(25);
        });
      });
      describe('When redefining a function in the receiving object', function() {
        return it('should be able to call the parent obj method via the _super obj', function() {
          var definedObj;
          definedObj = def.Object({
            include_: [baseObj1],
            multiply: function() {
              var numbers;
              numbers = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              return this._super.multiply.apply(this, numbers) * 2;
            }
          });
          return expect(definedObj.multiply(2, 2)).to.equal(8);
        });
      });
      return describe('When any of the parentObjects defines a constructor method', function() {
        return it('should be a constructor function that calls the constructor defined in the receiving obj ', function() {
          var definedObj, instance;
          definedObj = def.Class({
            include_: [
              {
                constructor: function(msg) {
                  return this.msg = msg;
                }
              }
            ],
            constructor: function() {
              return this._super.constructor(this, "I'm baked");
            }
          });
          instance = new definedObj("I'm baked");
          return expect(instance.msg).to.equal("I'm baked");
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=index.spec.js.map
