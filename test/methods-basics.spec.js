// Generated by CoffeeScript 1.9.3
(function() {
  describe('The def-inc module', function() {
    it('should have an Object method', function() {
      expect(def.Object).to.exist;
      return expect(def.Object).to.be.a('function');
    });
    describe('Module method', function() {
      it('should exist', function() {
        expect(def.Module).to.exist;
        return expect(def.Module).to.be.a('function');
      });
      return it('should be an alias for object method', function() {
        return expect(def.Module).to.equal(def.Object);
      });
    });
    describe('Mixin method', function() {
      it('should exist', function() {
        expect(def.Mixin).to.exist;
        return expect(def.Mixin).to.be.a('function');
      });
      return it('should be an alias for object method', function() {
        return expect(def.Mixin).to.equal(def.Object);
      });
    });
    it('should have a Class method', function() {
      expect(def.Class).to.exist;
      return expect(def.Class).to.be.a('function');
    });
    it('should have an Abstract method', function() {
      expect(def.Abstract).to.exist;
      return expect(def.Abstract).to.be.a('function');
    });
    it('should have a setNonEnum method', function() {
      expect(def.setNonEnum).to.exist;
      return expect(def.setNonEnum).to.be.a('function');
    });
    it('should have a getNonEnum method', function() {
      expect(def.getNonEnum).to.exist;
      return expect(def.getNonEnum).to.be.a('function');
    });
    describe('getEnum method', function() {
      return it('should return the nonEnum settings', function() {
        var settings;
        settings = def.getNonEnum();
        expect(settings.leadingChar).to.equal('_');
        return expect(settings.enabled).to.be.a('boolean');
      });
    });
    return describe('setEnum method', function() {
      describe('when the only the first argument is passed', function() {
        return it('should set the leadingChar to whatever is passed as the first argument and the enabled status as true', function() {
          def.setNonEnum('_');
          expect(def.getNonEnum().leadingChar).to.equal('_');
          return expect(def.getNonEnum().enabled).to.be["true"];
        });
      });
      describe('when the two arguments are passed', function() {
        return it('should set the first argument as the leading char and the second as the enabled status', function() {
          def.setNonEnum('$', false);
          expect(def.getNonEnum().leadingChar).to.equal('$');
          return expect(def.getNonEnum().enabled).to.be["false"];
        });
      });
      return after(function() {
        return def.setNonEnum('_', false);
      });
    });
  });

}).call(this);

//# sourceMappingURL=methods-basics.spec.js.map
